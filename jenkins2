pipeline {
    agent any

    tools {
        jdk 'jdk17'
        nodejs 'node16'
    }

    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout from Git') {
            steps {
                git branch: 'main', url: 'https://github.com/sakth1x02/Devsecops.git'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''
                        $SCANNER_HOME/bin/sonar-scanner \
                        -Dsonar.projectName=Netflix \
                        -Dsonar.projectKey=Netflix
                    '''
                }
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh "npm install"
            }
        }

        stage('OWASP FS Scan') {
            steps {
                // Make sure output directory is clean
                sh 'rm -rf dependency-check-report && mkdir dependency-check-report'

                // Run OWASP Dependency-Check with XML output format
                dependencyCheck additionalArguments: '--scan ./ --format XML --out dependency-check-report --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'

                // Confirm the report was created
                sh 'ls -lh dependency-check-report'

                // Optional: explicitly show the path of the report
                sh 'find dependency-check-report -name "*.xml"'

                // Publish the XML report
                dependencyCheckPublisher pattern: 'dependency-check-report/dependency-check-report.xml'
            }
        }

        stage('Trivy FS Scan') {
            steps {
                sh "trivy fs . > trivyfs.txt"
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh '/usr/local/bin/docker-compose build'
                        sh 'docker tag netflix sakth1x02/netflix:latest'
                        sh 'docker tag server sakth1x02/server:latest'
                        sh 'docker tag mongo:latest sakth1x02/mongo:latest'
                        sh 'docker push sakth1x02/netflix:latest'
                        sh 'docker push sakth1x02/server:latest'
                        sh 'docker push sakth1x02/mongo:latest'
                    }
                }
            }
        }

        stage('Trivy Image Scan') {
            steps {
                sh "trivy image sakth1x02/netflix:latest > trivyimage.txt"
                sh "trivy image sakth1x02/server:latest > trivyimage.txt"
            }
        }

        stage('Deploy to Container') {
            steps {
                sh '/usr/local/bin/docker-compose up -d'
            }
        }
    }
}
